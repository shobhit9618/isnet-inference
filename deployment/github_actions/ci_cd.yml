name: CI/CD Pipeline for ISNet Segmentation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to production'
        required: true
        default: 'false'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        python -m pytest src/tests/ -v --cov=src
        
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        fail_ci_if_error: false

  build:
    name: Build Docker Image
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.deploy == 'true'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f deployment/sagemaker/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy-dev:
    name: Deploy to Development
    needs: build
    runs-on: ubuntu-latest
    environment: development
    if: github.event_name == 'push' || github.event.inputs.deploy == 'true'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Install deployment dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sagemaker boto3
        
    - name: Deploy to SageMaker (Dev)
      env:
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
        MODEL_BUCKET: ${{ secrets.MODEL_BUCKET }}
        DEV_ENDPOINT_NAME: ${{ secrets.DEV_ENDPOINT_NAME }}
      run: |
        python deployment/sagemaker/deploy.py \
          --image-uri $ECR_REPOSITORY:$IMAGE_TAG \
          --model-data s3://$MODEL_BUCKET/models/isnet/model.tar.gz \
          --endpoint-name $DEV_ENDPOINT_NAME \
          --instance-type ml.g4dn.xlarge \
          --instance-count 1

  deploy-prod:
    name: Deploy to Production
    needs: deploy-dev
    runs-on: ubuntu-latest
    environment: production
    if: github.event.inputs.deploy == 'true'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Install deployment dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sagemaker boto3
        
    - name: Deploy to SageMaker (Prod)
      env:
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
        MODEL_BUCKET: ${{ secrets.MODEL_BUCKET }}
        PROD_ENDPOINT_NAME: ${{ secrets.PROD_ENDPOINT_NAME }}
      run: |
        python deployment/sagemaker/deploy.py \
          --image-uri $ECR_REPOSITORY:$IMAGE_TAG \
          --model-data s3://$MODEL_BUCKET/models/isnet/model.tar.gz \
          --endpoint-name $PROD_ENDPOINT_NAME \
          --instance-type ml.g4dn.xlarge \
          --instance-count 2 