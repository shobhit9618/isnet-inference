#!/usr/bin/env python

"""
Entrypoint for the SageMaker container
"""

import os
import signal
import sys
import traceback
import json
import logging

import flask
from flask import Flask, request, jsonify

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

sys.path.append('/opt/program')
from deployment.sagemaker.handler import model_fn, input_fn, predict_fn, output_fn

app = Flask(__name__)
model = None

# health check endpoint
@app.route('/ping', methods=['GET'])
def ping():
    if model is None:
        return flask.Response(response='\n', status=404, mimetype='application/json')
    
    return flask.Response(response='\n', status=200, mimetype='application/json')


# inference endpoint
@app.route('/invocations', methods=['POST'])
def invocations():
    try:
        content_type = request.headers.get('Content-Type', '')
        accept = request.headers.get('Accept', '')
        
        # Parse the input data
        input_data = input_fn(request.data, content_type)
        # Run prediction
        prediction = predict_fn(input_data, model)
        # Prepare the output
        response, response_content_type = output_fn(prediction, accept)
        # Return the response
        return flask.Response(response=response, status=200, mimetype=response_content_type)
        
    except Exception as e:
        logger.error(f"Error during invocation: {e}")
        traceback.print_exc()
        
        return flask.Response(
            response=json.dumps({"error": str(e)}),
            status=500,
            mimetype='application/json'
        )


def main():
    global model
    
    try:
        model_dir = os.environ.get('SM_MODEL_DIR', '/opt/ml/model')
        logger.info(f"Loading model from {model_dir}")
        model = model_fn(model_dir)
        
        # Start the server
        port = int(os.environ.get('SM_HTTP_PORT', 8080))
        logger.info(f"Starting server on port {port}")
        app.run(host='0.0.0.0', port=port)
        
    except Exception as e:
        logger.error(f"Error starting server: {e}")
        traceback.print_exc()
        sys.exit(1)


if __name__ == '__main__':
    main() 